https://www.youtube.com/watch?v=MFuwkrseXVE
Next.js Crash Course for Beginners 2021 - Learn NextJS from Scratch

The  Difference between framework and library
The technical difference between a framework and library lies in a term called inversion of control.

When you use a library, you are in charge of the flow of the application. You are choosing when and where to call the library. When you use a framework, the framework is in charge of the flow. It provides some places for you to plug in your code, but it calls the code you plugged in as needed.
Nextjs is the react framework for production.
React-you still write react code, you still build react components and use react features (props,
state, context..)
Nextjs just enhances your react app and adds more feature.

Framework- lots of builtin feature e.g. e.g. routing that helps you solve common problem and 
clear guidance on how to use these features.

Server side rendering - preparing all the content of a page on the server rather than on 
client side.

If it s a public facing app, SEO matters.
If it s only reached by staffs through login, even search engines do not reachout so SEO doesn't matter

If that page is pre-rendered on the server and if that data fetching could be made on the server
when request hits that server,the finished page would be served to our users.
This has advantage
 - users will not have that firtering loading page
 - search engines would see our page content

After the initial page page, you still get the standard single page react app.

Server side rendering - automatic page rerendering which is great for seo

Routing

Traditional react routing
import Layout from './components/layout/layout'
function App(){
return (
<Layout>
 <Switch>
  <Route path='/' exact>
   <AllMeetupsPage>
    
   </Route>
  <Route path='/favorite'>
   <FavoritePage>
    
   </Route>
 </Switch>
</Layout>
)

Nextjs defines routes with files and folders instead of codes. Avoides routes in code.
This lets us write less code.

Nextjs has fullstack capability - it is easy to add the backend api with nodejs code


========================
creating a nextjs app
npx create-next-app next-js-course

package.json after creating the project
{
  "name": "next-js-course",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "next": "13.0.6",
    "react": "18.2.0",
    "react-dom": "18.2.0"
  }
}
--------------------

Install Prettier Extension
View -> Command Pallate -> write default format
set Pretteir code formatter
---------------------

What does it takes for https://localhost:3000 to work,

just simply have an index.js in pages folder
and add a simple react code


export default function HomePage() {
  return <h1>Welcome, Home Page</h1>;
}
 
Now navigate to http://localhost:3000 and find the output

or create new.js and add

export default function NewsPage() {
  return <h1>Welcome, NewsPage</h1>;
}
now navigate to http://localhost:3000/news
See the file base routing system?
-------------------------------------------

Or alternatively, create news folder and move the news.js in here, rename it to index.js
as expected same url http://localhost:3000/news works.

Thus folders act as path segment
Nested path is done throgh creating subfolders
-----------------------------------------
Nested path
Lets creat a path for http://localhost:3000/news/[newsId]

To do create a js file with any name in square bracket
page/news/[newsId].js
import { useRouter } from "next/router";

function DetailPage() {
  const router = useRouter();
  const newsId = router.query.newsId;
  return <h1>This is page of news ID: {newsId}</h1>;
}
export default DetailPage;
---------------------------------------------
alternatively you can create [newsId] folder and insisde an index.js page
---------------------------------------------
Navigating from page to page using links
if you use a as link, page reload ll occur (see that the back btn of the browser is enabled)
but what we need is we want to stay in that single page application.
to do this use special component from react called link.

This ll give us advantage to preserve states accross pages and a better experience for user.






















------------------------------------
Static Pages
if you want to render static page, you need to have the function getStaticProps that provide 
static prop of the page. It is allowed to by synchronous

Note:getStaticProps should return props object return {props: {prop1: val1, prop2: val2}}
     every code in the function is run on the server, e.g. fetch data here and asign it to the props



E.g. without using getStaticProps

pages/index.js

import {useState, useEffect} from 'react'

import {MeetupList} from './../MeetupList'

const HomePage = (props)=>{
 const [meetups, setMeetups] = useState([])
, 
 useEffect(()=>{
   const getMeetups = ()=>{
   const res = await fetch('/url');
   const data = await res.json();
   setMeetups(data);
  }
    getMeetups();
}, [])

return (<MeetupList meetups={meetups} />)
}
---------------------------------------------------
using getStaticProps you don't need to keep state b/s all the data is found from props

function HomePage() {
 return <MeetupList meetups= {props.meetups} />
}

export static function getStaticProps(){
 const meetupData = []
 //fetch the data here
 return {
    props: {meetups: meetupData}
  }
}

export default HomePage
====================================================

Note the d/c in the first case when rendered, the list was empty, (you can see when u go to page
source) only react then fetch the data in the client side and rendered to dom.
In the static props case the data will be visible as you go to page source. b/s the data is pre-rendered

npm run build

see on the output details - tell us types of generated page
lamda => Server side renders at runtime uses getInitialProps or getServersideProps
o     => automatically rendered as static html uses no initial props
dot   => automatically generated as static HTML + JSON (uses getStaticProps)
  ISR  Incremental static generation  uses revalidate in getStaticProps

Using ISR
if data is subjected to change, re-generating and re-rendering is required so we use revalidate
property to unlock ISR

export static function getStaticProps(){
 const meetupData = []
 //fetch the data here
 return {
    props: {meetups: meetupData},
    revalidate: 3600 //every hour check if data is changed and regenerate page
  }
}
Note in the above we do not need to 

Server side rendering
=======================
getServerSideProps let us generate data and page on server and render the html on every request.
You can use in situations when you want to access context class to access req and res
 or in situations where there is frequent change on data
Note. The data is visible in the page source code


export async function getServerSideProps(context) {
 const req = context.req
 const res = context.res

 //fetch from API

return {
  props: {
   meetups: DUMMY_MEETUP
  }
 }
}

Note context object also exist in getStaticProps but it does not contain the req object,
so how do you capture the id from request? use context.params.id

================
getStaticPaths it is required whenever we use getStaticProps
it tells nodejs that for which ids that we want to generate static pages,  and also if the list
of ids doesnot contain thes ids, what to do (either the 404 response which is a fallback: false
or try to regenerate the page - fallback: true)

export const getStaticProps = async (context) => {
  const res = await fetch(`${server}api/articles/${context.params.id}`);
  const article = await res.json();
  return { props: { article } };
};
export const getStaticPaths = async () => {
  const res = await fetch(`${server}api/articles`);
  const articles = await res.json();
  const ids = articles.map((article) => {
    return article.id;
  });
  const paths = ids.map((id) => {
    return { params: { id: id.toString() } };
  });

  return { paths, fallback: false };
};

===================================

===========================================
_app.js 
The _app. js file is the default App component that Next. js uses to initialize pages. 
It serves as the starting point for all of your page's components. 

You can wrapp it with Layout component to effect the layout in every page. This ll give next js
the advantage over the other way that is doing the wrapping for every page.
===========================================
Programmatically navigating to a link
import { useRouter } from "next/router";

const MeetupItem = ({ id, title, content, imgUrl, published }) => {
  const router = useRouter();

  const showDetailHandler = () => {
    router.push(`/meetup/${id}`);
  };
  return ( <button onClick={showDetailHandler}>Show detail</button>)

===========================================
If you want to have multiple adjacent JSX element, you might need to wrap it using Fragment component
imported from react
================================
geting the id from route

const MeetupItem = () {
const router = useRouter();
const showDetailHandler = () => {
    router.push(`/meetup/${id}`);
  };

return (
  
      <div className={newsItemCss.action}>
        <button onClick={showDetailHandler}>Show detail</button>
      </div>
    </div>
  );

}
}

========
Then in the meetup/[newsId].js
function DetailPage() {
  const router = useRouter();
  const newsId = router.query.newsId;
  return <MeetupDetail id={newsId} />;
}
export default DetailPage;

=====================================================================================================
fetching instead of using the dummy data directly
This requires you to import useState and useEffect

//index.js
import { useEffect } from "react";
import { useState } from "react";
import MeetupList from "../components/MeetupList";
import { MEETUPS_DUMMY } from "../data";


export default function NewsPage() {
  const [loadedMeetupData, setLoadedMeetupData] = useState([]);
  useEffect(() => {
    setLoadedMeetupData([...MEETUPS_DUMMY]);
  }, []);
  return <MeetupList meetups={loadedMeetupData} />;
}

Thus instead of assigning the dummy data directly to prop (see in aboves) we only set it in useEffect and only after is asigned.
The difference is that the data ll be loaded after rendered, when page is rendered no data was visible in page source code.
The items are missed from html content, which is not good for the SEO.

==========================================================================

NEXTJS PRERENDERED PAGE

request -> /some route/ -> return prerendered page -> Then hydrate with react code once loaded -> page ll be interactive

TWO FORMS OF PRE-RENDERING - depends on when is the page content is generated

1. Static Generation - page content will be generated when you BUILD the app for production.
2.Server side Generation


1. Static Generation
By default Nextjs generate pages staticly, but if you want nextjs to fetch data before it generates the pages, you should call the following fns. These should
only be called in page componenet file and not in any others.
So through defining getStaticData, you can fetch data and asign it as static data before this component page is executed at build.
You can also use this fn to do some secure tasks that should only be run on the surver. These include securely accessing file system, connecting to
database.
Thus in this way the data is only found from props and not from managed state. Thus state mgt is not required. useState and useEffect r not required.

export default function NewsPage(props) {
    return <MeetupList meetups={props.loadedMeetupData} />;
}

export async function getStaticProps(){
 const meetupData = []
 //fetch the data here
 return {
    props: {meetups: meetupData}
  }
}
================================================================

Revalidating 

when the data we use is subjected to change, we have to regenerate the html pages. So we have to use revalidate attribute to tell after
how much seconds the data change is validated. When we use this revalidate attribute to the return object of getStaticProps, we just
unlock the INCREMENTAL STATIC GENERATION ISG feature of nextjs.

If you want to fetch the data on the fly on every request, then use getServerSideProps. it is similar to getStaticProps but code is executed
on every request. This is also run only on the server, no code will be sent to the client. Since page is loaded dynamically, parameters are
found from req object in the context property
export async function getServerSideProps(context) {
const {req, res}=context
const id = req.params.id
  //fetch data
  return {
    props: {
      loadedMeetupData: MEETUPS_DUMMY,
    },
  };
}


Note both getStaticProps and getServerSideProps do genrerate the html on server side and send it to the client. They are equally good for SEO.	
getStaticProps is faster for user experience b/s page is cashed and reused.
=================================================================

You can find static data and pass to props statically. But how can you get the id requested? The following example ll get the requested id

function DetailPage({ id }) {
  return <MeetupDetail id={id} />;
}


export default DetailPage;


//provide how to find the id
export async function getStaticProps(context) {
  const { meetupId } = context.params;
  return {
    props: { id: meetupId },
  };
}

//provides collection of parameter objects that include id (or meetupId ..name it whatever) , and what should be done if the id from request doen't included in these parameters-fallback
export async function getStaticPaths() {
  return {
    paths: [{ params: { meetupId: "1" } }, { params: { meetupId: "2" } }],
    fallback: false,
  };
}

Now let's automatically fetch the meetupIds

function DetailPage({ id }) {
  return <MeetupDetail id={id} />;
}
export default DetailPage;

export async function getStaticProps(context) {
  const { meetupId } = context.params;
  return {
    props: { id: meetupId },
  };
}
export async function getStaticPaths() {
  const data = MEETUPS_DUMMY.map((meetup) => {
    return { params: { meetupId: meetup.id.toString() } };
  });
  return {
    paths: data,
    fallback: false,
  };
}

Note 1 in getStaticProps context doesn t contain req object but params object
     2. getStaticPaths is a function that u need to provide if the page is dynamic and still use getStaticProps
     3. fallback=false means I have provided all possible ids or params so if request contain anyother redirect it to 404. The opposite ll
     2. In the above example, once we get the ids we could fetch the object from db and assign the object to props

==================================================================================================================
------------------------------------------------------------------------------------------------------------------

API API API

suppose you want to serve api/new-meetup  route
if so in the api folder create new-meetup.js (or new-meetup folder inside index.js)
the create and export a handler function

function handler(req, res) {
  if (req.method === "POST") {
    const data = req.body;
    //post data
    res.status(200).json({ message: "OK" });
  }
  const id = req.params.id;
  res.status(200).json({ message: "OK" });
}
export default handler;



USING THE MONGODB


npm install mongodb
go to mongodb, create account, create clustor.
click on database, connection, nodejs, then copy connection string
preparing the api
//api/new-meetup
import { MongoClient } from "mongodb";
async function handler(req, res) {
  if (req.method === "POST") {
    const data = req.body;
    //post data

    // const id = req.params.id;
    const connectionString =
      "mongodb+srv://fikremariam:f%40mongodb807@cluster0.ntqn95a.mongodb.net/?retryWrites=true&w=majority";
    const client = await MongoClient.connect(connectionString);
    const db = client.db();
    const meetupCollection = db.collection("meetups");
    const result = await meetupCollection.insertOne(data);
    console.log(result);
    res.status(202).json({ message: "OK", data: { ...data, id: result._id } });
    client.close();
    res.end();
  }



using the api in the form

import { server } from "../config";
import newMeetupStyle from "../styles/NewMeetupForm.module.css";
import { useState } from "react";
import { MEETUPS_DUMMY } from "../data";
import { useRouter } from "next/router";
const NewMeetupForm = () => {
  const router = useRouter();
  const [title, setTitle] = useState("");
  const [imgUrl, setImgUrl] = useState("");
  const [content, setContent] = useState("");
  const handleSubmit = async (event) => {
    event.preventDefault();
    const date = new Date().getDate().toString();
    const data = { title, imgUrl, content, date };
    const res = await fetch(`${server}/api/new-meetup`, {
      method: "POST",
      body: JSON.stringify(data),
      headers: { "Content-Type": "application/json" },
    });
    if (res.ok) {
      resetState();
    } else {
      console.log(res.statusText);
      alert(res.statusText);
    }

    //router.push("/");
  };
  function resetState() {
    setTitle("");
    setImgUrl("");
    setContent("");
  }
  return (
    <div className={newMeetupStyle.container}>
      <form className={newMeetupStyle.form}>
        <label>Meetup Title:</label>
        <input
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          type="text"
        />

        <label>URL for image:</label>
        <input
          value={imgUrl}
          onChange={(e) => setImgUrl(e.target.value)}
          type="text"
        />

        <label>Content:</label>
        <textarea
          value={content}
          onChange={(e) => setContent(e.target.value)}
          type="text"
        />
        <button onClick={handleSubmit}>Save</button>
      </form>
    </div>
  );
};

export default NewMeetupForm;

//config/index.js
const server =
  process.env.NODE_ENV === "development"
    ? "http://localhost:3000"
    : "https://myserver.com";
export { server };
=======================
Note to navigate away from the current page you can use router.replace('/'). This protect the user from returning back. Or router.push('/')

===============================================

if you import something, and use it in the getStaticProps or getServerSideprops, the import will not be bundled to the client. This is nice for
the app bundlesize.

//getting data from mongodb
You can fetch data from db and asign it to static props replacing with dummy data

import { MongoClient } from "mongodb";
import MeetupList from "../components/MeetupList";
import { MEETUPS_DUMMY } from "../data";
function NewsPage(props) {
  return <MeetupList meetups={props.loadedMeetupData} />;
}
export async function getServerSideProps() {
  const connectioString =
    "mongodb+srv://fikremariam:f%40mongodb807@cluster0.ntqn95a.mongodb.net/?retryWrites=true&w=majority";
  const client = await MongoClient.connect(connectioString);
  const db = client.db();
  const meetupCollection = db.collection("meetups");
  const meetups = await meetupCollection.find().toArray();

  client.close();
  //console.log(meetups);
  return {
    props: {
      loadedMeetupData: meetups.map((meetup) => {
        return {
          id: meetup._id.toString(),
          title: meetup.title,
          content: meetup.content,
          published: meetup.published,
          imgUrl: meetup.imgUrl,
        };
      }),
    },
  };
}


export default NewsPage;
========================================================

fetching a specific record filtering by keys

import { MongoClient, ObjectId } from "mongodb";
import { MEETUPS_DUMMY } from "../../data";
import { useRouter } from "next/router";
import MeetupDetail from "../../components/MeetupDetail";

function DetailPage(props) {
  return <MeetupDetail meetup={props.meetup} />;
}
export default DetailPage;

export async function getStaticProps(context) {
  const { meetupId } = context.params;
  const connectioString =
    "mongodb+srv://fikremariam:f%40mongodb807@cluster0.ntqn95a.mongodb.net/?retryWrites=true&w=majority";
  const client = await MongoClient.connect(connectioString);
  const db = client.db();
  const meetupCollection = db.collection("meetups");
  const meetup = await meetupCollection.findOne({
    _id: new ObjectId(meetupId),
  });
 
  return {
    props: { meetup: JSON.parse(JSON.stringify(meetup)) },
  };
}
export async function getStaticPaths() {
  const connectioString =
    "mongodb+srv://fikremariam:f%40mongodb807@cluster0.ntqn95a.mongodb.net/?retryWrites=true&w=majority";
  const client = await MongoClient.connect(connectioString);
  const db = client.db();
  const meetupCollection = db.collection("meetups");
  const meetups = await meetupCollection.find().toArray();
  client.close();
  const data = meetups.map((meetup) => {
    return { params: { meetupId: meetup._id.toString() } };
  });
  return {
    paths: data,
    fallback: false,
  };
}


============================================
SEO OPTIMIZATION WITH ADDING HEAD

to add head, import Head component from next/head, then add title and meta
Note the description part is the one google displays in the lists of search result by users

....
import Head from "next/head";
import { Fragment } from "react";
function NewsPage(props) {
  return (
    <Fragment>
      <Head>
        <title>React Meetups</title>
        <meta
          name="description"
          content="Browse a huge list of highly active react meetups!"
        ></meta>
      </Head>
      <MeetupList meetups={props.loadedMeetupData} />
    </Fragment>
  );
}
================
You have to do this for every page e.g. for detail page

function DetailPage(props) {
  return (
    <Fragment>
      <Head>
        <title>{props.meetup.title}</title>
        <meta name="description" content={props.meetup.content}></meta>
      </Head>
      <MeetupDetail meetup={props.meetup} />
    </Fragment>
  );
}
export default DetailPage;

==================================================
DEPLOYMENT 
using vercel, 
vercel is developed by the same team that develp nodejs

go to https://vercel.com
signup with Github
select rep

the default config is enought so click deploy
----------------------
when you say fallback = true or blocking you mean the least of paths you specified is not exhasting, there might be more. In this case next js
regenerate the page rather than responding 404
